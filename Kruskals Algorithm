#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


int find(int parent[], int i) {
// Write your code here...
 if (parent[i] != i)
        parent[i] = find(parent, parent[i]);
    return parent[i];

}


void union1(int parent[], int rank[], int i, int j) {

    int ri = find(parent, i);
    int rj = find(parent, j);

    if (rank[ri] < rank[rj])
        parent[ri] = rj;
    else if (rank[ri] > rank[rj])
        parent[rj] = ri;
    else {
        parent[rj] = ri;
        rank[ri]++;
    }

	}	// Write your code here...



void kruskalMST(int **cost, int V) {

	typedef struct {
    int u, v, cost;
} Edge;

Edge *edges = (Edge *)malloc(V * V * sizeof(Edge));
int edgeCount = 0;

for (int i = 0; i < V; i++) {
    for (int j = i + 1; j < V; j++) {
        if (cost[i][j] != 9999) {
            edges[edgeCount].u = i;
            edges[edgeCount].v = j;
            edges[edgeCount].cost = cost[i][j];
            edgeCount++;
        }
    }
}

for (int i = 0; i < edgeCount - 1; i++) {
    for (int j = 0; j < edgeCount - i - 1; j++) {
        if (edges[j].cost > edges[j + 1].cost) {
            Edge temp = edges[j];
            edges[j] = edges[j + 1];
            edges[j + 1] = temp;
        }
    }
}

int *parent = (int *)malloc(V * sizeof(int));
int *rank = (int *)malloc(V * sizeof(int));
for (int i = 0; i < V; i++) {
    parent[i] = i;
    rank[i] = 0;
}

int mstCost = 0;
int edgeUsed = 0;

for (int i = 0; i < edgeCount && edgeUsed < V - 1; i++) {
    int u = edges[i].u;
    int v = edges[i].v;
    int setU = find(parent, u);
    int setV = find(parent, v);

    if (setU != setV) {
        printf("Edge %d:(%d, %d) cost:%d\n", edgeUsed, u, v, edges[i].cost);
        mstCost += edges[i].cost;
        union1(parent, rank, setU, setV);
        edgeUsed++;
    }
}

printf("Minimum cost= %d\n", mstCost);

free(edges);
free(parent);
free(rank);
	
}




int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
